/*
함수란?
일련의 과정을 문으로 구현하고, 코드블록으로 감싸서
하나의 실행단위로 정의한 것을 의미함

즉 미리 function이라는 키워드로 자주 쓰는 코드를 묶어주는 행위를
함수라고도 함

함수를 사용하는 이유
함수로 일련의 과정을 하나의 실행단위로 정의하면, 여러 번 같은 내용을 
호출할 때마다 같은 결과와 과정으로 '재사용'하면서 코드를 사용할 수 있어
높은 유지보수성과 편의성을 추구할 수 있음
이런 이점은 코드 사용의 실수를 줄여서 코드의 신뢰성을 높힐 수 있음

 */

function add() {
	console.log('good morning');
}
// add라는 이름의 함수를 호출, 사용될 때마다
// 콘솔에 good morning이라는 글자를 남기는 역할을 함

// 함수는 재사용성이 최우선이기 때문에 함수의 모양과 적용은
// 재사용 방법에 초점이 맞추어져 있음

function greet(name, place) {
	console.log(`Hello ${name}! Welcome to ${place}!!`);
}
greet('gyoung', 'oori');
/* ()안에 있는 것은 매개변수(parameter)
: 함수를 정의할 때 넘겨받을 값을 사용하기 위해서 함수 내부에서 정의하는 변수를 의미
예시를 들은 곳에서 greet(name,place)이곳의 name과 place가 매개변수가 됨

인수, 인자(argument)
: 함수를 호출할 때 함수 내부로 넘기는 값, 그 값 자체를 말함
예시를 들은 곳에서 greet('gyoung', 'oori');
함수를 호출하는 곳에서 사용한 gyoung, oori가 인수가 됨
*/
greet('승연', '우리');

function greeting() {
	console.log('Hello gyoung! Welcome to oori!!');
}
greeting();

// 함수를 만드는 방법 3가지
// 함수는 정의를 통해서 생성함

// 1. 함수 선언문
function 이름() {}
// 키워드, 함수 이름, 매개변수 자리, 함수 본체
// 함수를 선언문으로 작성하면, 함수 사용을 파일 전체 어느 곳에서든지
// 호출해서 사용할 수 있음
// 이유는 함수가 호이스팅에 의해서 파일 초기부터 함수의 존재를 알고 시작하기 때문
// (여기서 선언한 함수를 윗줄에서도 사용이 가능함)
// 함수 선언문으로 정의할 때는 함수 이름을 생략할 수 없음

// 2. 함수 표현식
// let add = function add() {};
// 기명함수 표현식
// or
// let addd = function () {};
// 익명함수 표현식 - 함수 이름이 없는 것
// 이렇게 생성된 함수는 이 이후부터 사용이 가능함(61번째 줄부터)

// 3. 화살표 함수
() => {};
/*
ES6(에크마6) 문법 이후에 함수 생성 방법이 도입되었음
키워드 function 대신 =>를 사용해서 간략하게 선언할 수 있음
다만 항상 익명함수로 정의되며, 주로 콜백함수로 사용함
*/

// function aaa       (   )         {}
// 키워드    함수이름 매개변수    함수 본체(실행 구문이 들어감)

// 함수의 종류(형태)
/*
1. 중첩함수(내부함수)
함수 본체 안에 함수가 또 있는 것
 */
function outer() {
	let x = 1;
	function inner() {
		let y = 3;
		console.log(x + y);
	}
	inner();
}
outer();

// 2. 콜백함수
// 함수의 매개변수 자리에 함수가 있는 것
let body = document.querySelector('body');
let event = body.addEventListener('click', () => {});

/*
요약
function 함수이름 ( 콜백함수 ){ 중첩, 내부함수 }
()안에 즉 매개변수 자리에 있으면 콜백함수
{}안에 즉 함수 본체 안에 있으면 내부함수
*/

function plus(a, b) {
	let result = a + b;
	return result;
}

console.log(plus(2, 3));

/*
return ( 함수 반환값 )
함수 내부의 값을 함수 외부로 반환하는 것

함수 내부에서 일어나는 처리, 연산 등은 함수 내부에서 휘발되어
외부에는 영향을 미치지 않음,
그러므로 함수 내부에서 일어난 처리 값을 외부에서 쓰고 싶다면
return을 꼭 써줘야 함

단, 함수 내부에서 구문 실행 도중에 return문을 만지면
강제로 함수가 종료되고 return다음의 값을 반환하기 때문에
return 다음 구문은 실행되지 않게 됨
*/
