/*
변수란?
프로그래밍 언어에서 "데이터를 관리하기 위한 개념"
하나의 데이터(값)을 저장하기 위해서 확보한 메모리 공간 자체,
혹은 그 메모리 공간의 이름이라고 할 수 있음
변수는 '변수 이름'과 '변수의 값'으로 이루어져 있음
변수 이름이라고도 하지만 '식별자'로도 지칭함
*/

var name = '이현경';
/*
변수 선언 과정 : 변수를 사용하려면 선언, 즉 생성이 필요
방법으로는 var, let, const라는 세가지 방법이 존재

과정
1. 선언 단계 : 변수의 이름을 등록해서, 자바스크립트(이하 js) 엔진에
변수 존재를 알린다

2. 초기화 단계 : 값을 저장하기 위한 메모리 공간을 확보하고
암묵적으로 undefined라는 값을 할당하는 과정
(이 과정은 선언과 동시에 저절로 js가 진행한다)

3. 값의 할당 : 초기화를 거쳐서 메모리 공간이 확보된 변수에
특정한 값을 '= (대입연산자)'로 할당하는 과정
*/

var game;
game = 'league of legend';

var game2 = 'league of legend';
/*
변수가 중복되면 마지막에 코딩한 값이 덮어져서 재할당이 일어남
*/

console.log('league of legend');
console.log('game');
console.log(game);
/*
변수의 사용
변수는 프로그래밍 언어에서 데이터를 관리하기 위한 개념이므로
사용하고자 하는 데이터를 보관하고 실제 사용해야 하는 곳에서
해당 변수 이름을 호출하면 변수 안에 있는 데이터를 사용할 수 있음
이것을 '변수를 사용한다', '변수를 참조한다'고 표현함
*/

/*
변수의 scope : 변수가 영향을 미치는 범위

1. 전역 변수(global)
- js 최상단 즉 코드의 가장 바깥 영역에서 선언된 변수로
js 파일 전체에 걸쳐서 영향을 끼치는 변수이다

전역 변수의 특징
- 암묵적 결합 : 모든 코드가 전역변수를 참조하고, 변경할 수 있다
즉 변수의 스코프가 클수록 가독성이 떨어지고 위험성이 높아진다
- 긴 생명주기 : 전역변수는 해당 js파일이 유효하는 한 생존하기에
할당된 메모리를 점유하는 기간이 늘어나 메모리 누수가 있다
(변수가 늘어남과 동시에 메모리 차지가 같이 불어남)
- 네임 스페이스 오염 : 네임 스페이스란 변수 이름을 관리하는 js내부공간인데
js파일이 달라도 같은 html에 연결되면 하나의 전역 스코프를 공유하는 문제가 있다 

2. 지역 변수
- 함수 안에, 즉 코드 블록 안에 선언된 변수로 
해당 함수, 코드블록 안에서 선언되고 사용되며
지역변수는 자신의 지역과 하위 지역에서만 유효하다
(코드 블록 = 중괄호 {})
*/

console.log(변수);
var 변수 = '30';

function aaa() {
	var 변수입니다 = '여긴 지역임';
	console.log(변수);
}
console.log(변수);
aaa();

/*
변수 이름의 규칙
1. 숫자로 시작할 수 없음
2. 특수문자를 사용할 수 없음 (단, $, _ 는 예외)
3. 하이픈 '-' 사용할 수 없음

4. 예약어는 모두 사용불가
예약어란 js가 내부에서 사용하고 있는 명령어, 단어

5. 대소문자는 구분되어야 함
html에서는 대소문자 구분을 하지 않지만 js에서는 칼같이 함

6. 한글 변수도 가능하나, 추천하지 않음
다른 나라에서 한글 변수가 사용된 파일을 열면 한글이 깨져서
호환이 되지 않음
*/

/*
변수 선언 방법
1. var
문제점 : 변수 중복선언이 가능함, 따라서 변수 변경에 따른 부작용이 큼
ex ) 
var num = 3;
var num = 30;
var num = 31; => 이렇게 사용해도 에러가 발생하지 않음,
num이라는 변수를 믿고 사용하기 어려움

2. let
변수의 중복 선언이 불가함
let num = 3;
let num = 30;
let num = 31; => 에러가 발생함, num이라는 변수를 믿고 사용할 수 있음

var, let은 공통적으로 변수선언과 값 할당을 따로 할 수 있음
var num;
num = 30;
let num;
num = 30;

3.const
변수선언과 값 할당을 반드시 동시에 해줘야 함
const num2 = 30;
이유 : const는 변수선언 방법이 아니라 엄밀히는 상수선언 방법이라서
변수 - 변하는 수, 상수 - 항상 똑같은 값을 가지는 수
*/
