/*
연산자란
하나 이상의 표현식을 대상으로 산술, 할당, 비교, 논리, 타입,
지수 연산 등을 수행하여 하나의 값을 만드는 것
이때 연산의 대상을 피연산자라고 하고,
피연산자는 값으로 평가될 수 있는 표현식이 됨

1. 산술연산자
+, -, *, /
피연산자를 대상으로 수학적 계산을 수행하여
새로운 숫자값을 만드는 행위
만약 산술연산이 불가능한 경우?
NaN => Not a Number를 반환함

항이란
산술연산에 있어서 산술연산자를 제외한 피연산자들을 항이라고 함
예) 5 + 8 , 항이 2개. 5와 8은 항이라고 할 수 있음

2. 단항연산자
항이 하나인 산술연산을 하는 것
++a    , a++      (증가연산)
--a    , a--      (감소연산)
전위연산, 후위연산

증가연산은 피연산자를 +1 하는 것임
감소연산은 피연산자를 -1 하는 것임

예) let a = 5;
++a // 증가연산으로 +1이 되어 6이 됨
--a // 감소연산으로 -1이 되어 29번째 줄에 이어서 5가 됨

let num = 5;
let result1, result2;
result1 = num++;
console.log(num);        6  
console.log(result1);    5  후위연산이기 때문에 result1은 아직 5인 상태
result2 = ++num;
console.log(num);        7  num이 6인 상태에서 1이 더해짐
console.log(result2);    7  전위연산이기 때문에 1이 더해진 7이 됨

***후위연산은 줄바꿈이 일어난 후, 다음 줄에서 반영된다고 생각하면 됨


3. 이항연산자
6 + 5 처럼 항이 2개고, 연산자 하나인 식이 되는 것
기존에 알고있던 사칙연산에 추가적으로 '%'가 있음
%는 나머지를 구하는 연산자

예) 6%4 = 2


4. 할당연산자 (=)
우항에 있는 피연산자의 평가 결과를 좌항에 있는 변수에 할당하는 것
이때 좌항의 값은 변하게 됨

let number = 5;
number = number + 5;
console.log(number);   10
=> 평가가 먼저 이루어지기 때문에 5+5가 되고, number에 10이 대입됨

number = number = 5; 와
number += 5; 는 같음 (줄여서 표현한 것)
number *= 5; 는 25
number /= 5; 는 1


5. 동등 / 비교 연산자
== 동등비교연산자 , 수학에서 배운 등호와 같은 의미를 지님
=== 일치비교연산자 , 값이 같음을 넘어서 데이터 타입까지도
모두 일치하는지를 비교하는 것
not의 의미를 가지는 연산자로는 !가 있음
동등하지 않다 !=
일치하지 않다 !==
예) 4 == '4'    true
5 != "오"

*/

// 32번째 줄 실습
// let num = 5;
let result1, result2;
// result1 = num++;
// console.log(num);
console.log(result1);
// result2 = ++num;
// console.log(num);
console.log(result2);

// 56번째 줄 실습
let number = 5;
// number = number + 5;
// number += 5;
// number *= 5;
number /= 5;
console.log(number);

// 74번째 줄 실습
console.log(4 == '4');
/*
동등비교를 할 때 js에서는 형 변환을 함 <주의>
=> js에서는 암묵적인 타입변환이 일어나기 때문에 개발자가 값을 예상하기가 어려움
따라서 동등비교보다는 일치비교를 하는 것이 좋음

*/

/*
6. 문자열 연결연산자 (+)
숫자와 숫자를 +라는 연산자로 하게되면 합연산을 하지만
둘 중 하나라도 문자가 포함되어 있으면
문자열 연결연산자로 해당 피연산자를 연결하는 작업을 함
*/

let num = 3;
let str = '삼';
// console.log(num + str);    3삼

/*
7. 대소비교연산 >, <, >=, <=
예) if(5>num)


8. 논리연산자
&&(and), ||(or), !(not)

참 && 참 = 참
참 && 거짓 = 거짓
거짓 && 참 = 거짓
거짓 && 거짓 = 거짓
=> 앞에서부터 '하나씩 순차적으로' 평가를 하는데, 참이어야 다음으로 넘어감.

참 || 참 = 참
참|| 거짓 = 참
거짓 || 참 = 참
거짓 || 거짓 = 거짓
=> 둘 다 '동시에' 평가해서 '하나라도' 참이면 참이 뜸.


9. 그룹연산자 ()
피연산자를 감싸서 해당 표현식을 먼저 평가하도록 함


*/
