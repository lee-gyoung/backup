/*
 용어 개념 정리

 1. 값
 값이란 식(표현식)이 '평가'되어 생성된 결과를 말함
 -> 즉 평가가 가능해야 값으로 인정됨
 따라서 모든 값은 데이터 타입을 가짐. 이 값을 메모리에 2진수로 저장.
 저장된 메모리의 값은 해당 값의 데이터 타입에 따라 해석이 다름
 예) 0100 0001 이란 값이 존재
 ㄴ 숫자라는 타입으로 해석하게되면 65가 됨
 ㄴ 문자라는 타입으로 해석하게되면 대문자 A가 됨

 2. 문(statement)
 프로그램을 구성하는 기본 단위이자 최소 실행단위를 의미함
 보통 명령문이라고 부름. 즉 컴퓨터에게 개발자가 내리는 명령을 '문'이라고
 하고 문이 모여서 프로그램이 되고 문을 작성하고 순서에 맞게 나열하는 행위를
 '프로그래밍'이라고 함
 예) var sum = 1 + 1;

 3. 표현식
 값으로 평가될 수 있는 문을 의미함
 즉 평가가 될 수 있는 모든 것을 표현식이라고 함

 4. 평가
 식(표현식)을 해석해서 값을 생성하거나 혹은 참조하는 행위를 말함
 예) srhetjedf = 은 해석이나 무언가를 참조했거나 하는 행위가 일어날 수 
 없는 것이라서 평가할 수 없음
 1 + 4 이것은 1, 4라는 숫자 리터럴과 연산자에 의해서 값을 평가할 수 있음
 
 리터럴 : 사람이 이해할 수 있는 문자 또는 약속된 기호를 의미
 */

/*
 데이터 타입에는 2가지가 있음
 1. 원시형 자료
-1 문자열(string, str)
문자를 표현하는 것. 방법은 '반드시'
'',"",``(작은따옴표, 큰따옴표, 백틱)로 감싸서 표현해야 함
다른 타입과 달리 문자열을 따옴표 등으로 감싸는 이유는 키워드, 예약어, 식별자 등
js에 내장언어와 구분하기 위해서 사용

예) let str = "안녕"; => js가 문자열로 인식함
let str = 안녕; => js가 안녕이라는 변수를 찾으려고 시도
(문자열이 아닌 식별자, 예약어, 키워드 같은 것으로 인식하고 찾음)

레거시 - 오래전의 코드
문자를 삽입할 때 사용하던 이전버전 문법
 
let sung = 'Lee';
let name = 'gyoung';
console.log('내 이름은' + sung + '' + name + '입니다');

console.log(`내 이름은 ${sung} ${name} 입니다`);
ES6(에크미6 문법)에서는 템플릿 리터럴 표현이 생김
그 이전에는 문자열과 변수를 구분할 때 하나하나 따로 써야하는 번거로움이 있었으나
템플릿 리터럴에서는 백틱을 사용해서 문자열을 전체 다 감싸고
${}으로 변수를 인식하도록 하여 문자열 표현이 더 간결해지고
복잡한 식도 쓸 수 있게 됨

-2 숫자(number)
js에서는 다른 컴퓨터 언어와 달리 숫자타입이 하나임(단점)
모든 수를 실수로만 표현 가능하기 때문에 한계점이 있음

예) 다른 컴퓨터 언어와의 차이
int num = 30; 정수 숫자 타입이라는 것을 먼저 선언하고 변수이름, num값 대입 (다른 언어)
let num = 30; 변수선언, 변수이름, num 값 대입(js)

-3 불린형, 참거짓형, 불형 (boolean) <중요>
참과 거짓만 존재하는 값(true & false)

-4 undefined => 변수를 선언하고 할당하지 않았을 초기에 암묵적으로 부여되는 값
let num;
console.log(num); // undefined

-5 null - 값이 비어있는 것 하지만 에러 상황이 아니라 명시적(일부러)으로 값을 비워둔 경우
즉 메모리는 만들어야 하지만 지금은 값이 없거나 넣을 수 있는 상황이 아니라서
일부러 비워 둔 상황에 넣어두는 값

-6 심벌 
ES6에서 추가된 타입으로, 변경이 불가능한 원시타입으로 다른 값과 중복되지 않는
유일무이한 값.
예) 주민등록번호 뒷자리와 같이 보안과 중복불허용 등에 사용될 수 있음


2. 참조형 자료
 변수 메모리에 값이 직접 담겨있지 않고, 실제 값은 다른 곳에 존재하는 형식의
 데이터 타입.

 -1 배열
 같은 성격을 가진 일련의 데이터들을 그룹형태로 저장한 것으로
 인덱스(순번)으로 나열되고 검색함

 ex) let colors = ['red', 'yellow', 'brown', 'blue'];
 console.log(colors);
 console.log(colors[0]); (colors에서 red를 찾고 싶을 때)
 console.log(colors[8]); (이렇게 하면 undefined가 뜨는데, 
    지금 눈에 보이는 colors는 4개가 전부지만 js에서는 그 뒤에 추가 될
    가능성이 있는 부분까지 대기 메모리를 확보해두기 때문.)

-2 객체
다른 성격을 가진 일련의 데이터들을 그룹형태로 저장한 것으로
프로퍼티로 나열하고 검색함

프로퍼티란 객체 내에 있는 데이터(혹은 함수)를 이름(key)과 값의 쌍으로 표현하는 것을 말함 <중요>
let student1 = {
	name: 'woodz',
	age: 29,
	address: 'seoul',
	isMale: true,
};
=> name : 키 , 'woodz' : 값


배열과 객체를 섞어서 쓰기도 함 (객체배열)
let teamwdz = [{
    name: 'woodz',
	age: 29,
	address: 'seoul',
	isMale: true,
},{},{},{}];
이런식으로~~
 */
let student1 = {
	name: 'woodz',
	age: 29,
	address: 'seoul',
	isMale: true,
};

console.log(student1);
console.log(student1.name);

/*
형변환 - 타입을 변환한다는 의미 <중요>
js는 데이터 타입이 실행될 때(런타임) 결정되기 때문에
잦은 타입 간의 형변환이 일어남

암시적 형변환 - js가 실행될 때 데이터타입을 자동으로 변환해서 연산하는 값
단점 : 개발자의 의도와 상관없이 일어나기 때문에 개발자가 예측하지 못하는 상황이 일어남
*/

let num1 = '2';
let num2 = 3;
let num3 = 5;

console.log(num1 + num2);
console.log(num2 + num3);
console.log(typeof num1 + num2);
console.log(typeof num2 + num3);

/*
명시적 형변환 - 개발자가 직접 데이터 타입을 변환하는 것
*/

let numStr = '123';
console.log(typeof numStr);
let numNum = Number(numStr);
console.log(typeof numNum);
