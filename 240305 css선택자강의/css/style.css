@charset "utf-8";
* {
	/* 전체 선택자는 '*' */
	margin: 0px;
	padding: 0px;
}

/* 1. 클래스 선택자
    태그의 종류나 위치가 달라도 같은 클래스가 있으면 동시에 호출함 */
.txt {
	color: teal;
}

/* 2. 클래스 both
    클래스 both는 이중 클래스를 동시에 가지는 요소를 호출함 */
.txt.text {
	text-decoration: underline;
}

/* 3. 자손 선택자 */
.div .child_div {
	font-size: 30px;
}

/* 4. 아이디 선택자 */
#txt {
	color: tomato;
}

/* 5. 요소 선택자(태그 선택자)*/
em {
	/* 해당 페이지 안에 있는 모든 em요소를 호출하는 것으로
    조심해야함 */
	font-weight: bold;
}

section em {
	/* section태그 안에 있는 모든 em태그를 호출 */
	color: yellowgreen;
}

/* 6. 직계 자식 선택자 
    단순한 태그 선택자로는 한계가 있어서 직계 자식 선택자인 
    '>'으로 바로 아래 항렬의 자식을 호출할 수 있음 */
.txt2 p {
	color: orange;
}

.txt2 > p {
	font-size: 30px;
}

/* and로 연결하는 방법 */
.p,
.s {
	background-color: olive;
}

/* 8.상태선택자
    input:checked => input태그인데 checked가 붙어서 체크가 된
    상태일 때의 input태그를 의미하는 것으로 바뀜

    9. 인접 형제 선택자 
    input:checked 같은 요소 바로 뒤에 있는 h1태그를 의미
    즉 h1인데 +가 앞에 붙으면서 특정 상황이나 조건일 때의 그 다음에 있는
    형제요소 무엇을 호출하는 것
    지금은 체크박스가 체크 되어있을 때 그 다음으로 오는 
    h1 태그의 글자색을 코딩
    
    주의!) 바로 다음에 오는 요소만 적용 가능함.
    중간에 다른  요소가 끼어있으면 안됨 */
input:checked + h1 {
	color: plum;
}

/* 10. 일반 형제 선택자
    상속받은 요소에 적용 
    여기에서 h3는 적용되지 않음 */
h3 ~ ul {
	color: brown;
}

/* 11. 속성 선택자 */
input[type='email'] {
	background-color: salmon;
}

a {
	background-color: wheat;
}

a[target] {
	/* a태그 중에 target 속성이 존재하는 요소만을 선택 */
	text-decoration: none;
}

a[target='_blank'] {
	/* a태그 중에 target 속성을 갖고 _blank의 속성값을 갖는 요소를 선택 */
	font-size: 30px;
}

a:visited {
	color: aliceblue;
}

a:active {
	color: pink;
}

h2[class^='main'] {
	/* main으로 시작하는 클래스 속성을 가진 요소를 호출함 */
	color: blueviolet;
}

h2[class$='_txt2'] {
	/* _txt2로 끝나는 클래스 속성을 가진 요소를 호출함 */
	border-bottom: 1px solid #000;
}

h2[class~='com'] {
	/* com이라는 클래스 명을
    앞뒤에 다른 내용없이(띄어쓰기 안에) 완벽히 일치하는 요소만 호출함 */
	color: red;
}

h2[class*='txt'] {
	/* txt라는 클래스 명을 포함하는 모든 요소를 호출함 */
	background-color: darkgoldenrod;
}

/* 12. 가상선택자(문자선택자) */
.able::before {
	content: '☆';
	display: block;
	width: 100px;
	height: 2px;
	background-color: rebeccapurple;
}

.able::after {
	content: '◆';
}

/* css 선택자 우선순위
    기본적인 규칙: 나중에 쓴 css 내용이 이전의 내용을 덮어쓴다 
    
    1. 속성의 값 뒤에 !important를 붙이면 무조건 최우선이 됨
    => 하지만 절대 사용해서는 안됨. 나머지 우선순위가 다 꼬이기 때문에
    이것 외의 내용에 대한 우선순위 적용이 어려움
    따라서 정말 최종적으로 사용할 수 밖에 없을 경우에만 사용 
    
    2. html에 style속성으로 css를 적용하면 (최)우선이 됨
    => 그러나 html이 너무 길어지고, css와 html에 스타일을 나눠서 적용하면
    협업과 유지보수에 안좋은 영향이 있어 되도록 지양함
    
    3.id로 지정한 속성은 우선순위가 됨

    4. 클래스로 지정한 속성이 우선순위가 됨

    5. 태그 이름으로 지정한 속성이 우선순위가 됨

    6. 상위 객체로부터 상속된 속성이 적용됨

    => !important > 인라인 > id > class > 태그 > 상속된 속성
    */
.list {
	font-size: 5px;
	/* !important; */
}

#list {
	font-size: 100px;
}

.list {
	font-size: 20px;
}
